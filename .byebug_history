continue
BSON::ObjectId.from_time(Time.now.to_i, unique: true)
BSON::ObjectId.from_time(Time.now.to_i, unique: true).to_bson
BSON::ObjectId.from_time(Time.now.to_i, unique: true).methods
BSON::ObjectId.from_time(Time.now.to_i, unique: true)
continue
BSON::ObjectId.from_time(Time.now.to_i, unique: true).to_str
BSON::ObjectId.from_time(Time.now.to_i, unique: true).to_string
BSON::ObjectId.from_time(Time.now.to_i, unique: true)
BSON::ObjectId.from_time(Time.now, unique: true)
BSON::ObjectId.from_time(1, unique: true)
BSON::ObjectId.from_time(time, unique: true)
BSON::ObjectId.from_time(124)
BSON::ObjectId.from_time(123)
BSON::ObjectId.from_time
BSON::ObjectId.methods
generator.next_object_id
BSON::ObjectId.from_string 'dsdsd'
BSON::ObjectId.from_string generator.next_object_id
generator.next_object_id.force_encoding('UTF-8').encoding
generator.next_object_id.force_encoding('UTF-8')
generator.next_object_id.encoding
generator.next_object_id.encode('UTF-16')
generator.next_object_id.encode!('UTF-16')
generator.next_object_id.encode!('UTF-16', 'UTF-8')
generator.machine_id
generator.methods
generator.next_object_id
generator.next_object_id.force_encoding('iso-8859-1')
generator.next_object_id.force_encoding('iso-8859-1').encode('utf-8')
"\xC3".force_encoding('iso-8859-1').encode('utf-8')
generator.next_object_id.force_encoding("utf-8")
generator.next_object_id.encode("iso-8859-1").force_encoding("utf-8")
generator.next_object_id(123)
generator.methods
generator.next_object_id
continue
client[:unit].insert_one({name: 'olya', surname: 'hudeichuk'})
client[:unit]
client[:role]
continue
"#{symbol_1.downcase}:#{symbol_2.downcase}"
get_pair(symbol_1, symbol_2)['data']
c
get_pair(symbol_1, symbol_2)
continue
get_pair(symbol_1, symbol_2)
continue
get_pair(symbol_1, symbol_2)['tick']
get_pair(symbol_1, symbol_2)['data']
get_pair(symbol_1, symbol_2)
continue
aa['ETH_GNO']
aa['BTC_XVC']
aa['BTC_ETH']
aa['ETH_BTC']
aa['BTC_ETH']
aa.keys.size
aa.keys
aa
c
continue
b
a
a, b = 8
conf.cex
conf.binance
conf.poloniex
conf.methods
conf
self
connection.open
connection.methods
continue
connection
connection.methods
continue
self
Thread.current
Thread.methods
continue
self
continue
self
continue
self
continue
self
continue
self
continue
self
ыуда
continue
self.class.ancestors
self.ancestors
self
